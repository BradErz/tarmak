// vim: et:ts=2:sw=2:ft=groovy
node {
  properties([
    parameters([
      booleanParam(name: 'terraformDestroy', defaultValue: false, description: 'Should this stack be destroyed?'),
      booleanParam(name: 'interactiveMode', defaultValue: true, description: 'Should I ask interactively before applying changes?')
    ])
  ])


  try {
    checkout scm

    def splitJobName = env.JOB_NAME.split('/')

    def terraformStack = splitJobName[-1]
    def terraformName = splitJobName[-3]
    def terraformEnvironment = splitJobName[-4]
    env.TERRAFORM_ENVIRONMENT = terraformEnvironment
    env.TERRAFORM_NAME = terraformName
    env.TERRAFORM_STACK = terraformStack
    env.TERRAFORM_DESTROY = params.terraformDestroy

    def sshCredentialId = "ssh_jenkins_${terraformEnvironment}"

    env.IMAGE_NAME = "jetstack/tarmak-terraform"
    env.IMAGE_TAG = "${terraformEnvironment}-${terraformName}-${terraformStack}-${env.BUILD_NUMBER}"

    stage ('build docker image'){
      sh "make build terraform_sync"
    }

    // this is only for stack vault
    if (terraformStack == 'vault') {
      stage("ensure vault secrets exist") {
        if (params.terraformDestroy != true) {
          wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
            sh "make vault_secrets"
          }
        }
      }
    }

    // stores terraform plan status
    def statusPlan = 0

    // this is only for stack kubernetes
    if (terraformStack == 'kubernetes') {
      stage("setup k8s cluster in vault") {
        if (params.terraformDestroy != true) {
          wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
            sh "make vault_setup_k8s"
          }
        }
      }

      stage("deploy puppet code to environment") {
        if (params.terraformDestroy != true) {
          withCredentials([file(credentialsId: sshCredentialId, variable: 'SSH_KEY_PATH')]) {
            wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
              step ([
                $class: 'CopyArtifact',
                projectName: '../../puppet_code',
                filter: 'puppet.tar.gz',
              ])
              sh "make puppet_deploy_env"
            }
          }
        }
      }
    }

    stage("terraform plan ${terraformStack}") {
      wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
        sh 'make terraform_plan'
        exitCode = sh(script: 'cat .terraform_exitcode', returnStdout: true)
        statusPlan = exitCode.trim() as int
        if (statusPlan != 2 && statusPlan != 0){
          error("terrafrom plan failed with exit code ${statusPlan}")
        }
      }
    }

    // this is only run if plan has actual changes
    stage("terraform apply ${terraformStack}") {
      if (statusPlan == 2){
        if (params.interactiveMode) {
          input 'Shall I apply?'
        }
        wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
          sh "make terraform_apply"
        }
      } else {
        echo 'No changes - no apply needed'
      }
    }

    if (terraformStack == 'vault') {
      stage("ensure vault is initialized") {
        if (params.terraformDestroy != true) {
          wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
            sh "make vault_initialize"
          }
        }
      }
    }

    // this is only for stack kubernetes
    if (terraformStack == 'kubernetes') {
      stage("generate kubeconfig file") {
        if (params.terraformDestroy != true) {
          wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
            sh "make vault_kubeconfig"
            archiveArtifacts artifacts: 'kubeconfig-*', fingerprint: true
          }
        }
      }

      stage("run puppet apply on every node") {
        if (params.terraformDestroy != true) {
          wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
            withCredentials([file(credentialsId: sshCredentialId, variable: 'SSH_KEY_PATH')]) {
              sh "make puppet_node_apply"
            }
          }
        }
      }
    }
  }
  finally {
    sh "make clean"
  }
}
