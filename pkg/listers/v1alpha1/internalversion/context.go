/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	v1alpha1 "github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ContextLister helps list Contexts.
type ContextLister interface {
	// List lists all Contexts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Context, err error)
	// Contexts returns an object that can list and get Contexts.
	Contexts(namespace string) ContextNamespaceLister
	ContextListerExpansion
}

// contextLister implements the ContextLister interface.
type contextLister struct {
	indexer cache.Indexer
}

// NewContextLister returns a new ContextLister.
func NewContextLister(indexer cache.Indexer) ContextLister {
	return &contextLister{indexer: indexer}
}

// List lists all Contexts in the indexer.
func (s *contextLister) List(selector labels.Selector) (ret []*v1alpha1.Context, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Context))
	})
	return ret, err
}

// Contexts returns an object that can list and get Contexts.
func (s *contextLister) Contexts(namespace string) ContextNamespaceLister {
	return contextNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ContextNamespaceLister helps list and get Contexts.
type ContextNamespaceLister interface {
	// List lists all Contexts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Context, err error)
	// Get retrieves the Context from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Context, error)
	ContextNamespaceListerExpansion
}

// contextNamespaceLister implements the ContextNamespaceLister
// interface.
type contextNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Contexts in the indexer for a given namespace.
func (s contextNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Context, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Context))
	})
	return ret, err
}

// Get retrieves the Context from the indexer for a given namespace and name.
func (s contextNamespaceLister) Get(name string) (*v1alpha1.Context, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("context"), name)
	}
	return obj.(*v1alpha1.Context), nil
}
